# Install required libraries
!pip install scikit-surprise

# Import libraries
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from surprise import SVD, Dataset, Reader
from surprise.model_selection import train_test_split
import warnings
warnings.filterwarnings("ignore")

# Load MovieLens dataset (small version for demo)
movies_url = "https://raw.githubusercontent.com/sidooms/MovieTweetings/master/latest/movies.dat"
ratings_url = "https://raw.githubusercontent.com/sidooms/MovieTweetings/master/latest/ratings.dat"

movies = pd.read_csv(movies_url, sep='::', engine='python', names=['movieId', 'title', 'genres'])
ratings = pd.read_csv(ratings_url, sep='::', engine='python', names=['userId', 'movieId', 'rating', 'timestamp'])

# Show sample data
print("Movies Sample:\n", movies.head())
print("\nRatings Sample:\n", ratings.head())

# ---------- Collaborative Filtering (SVD) ----------
# Prepare data for Surprise
reader = Reader(rating_scale=(0.5, 5.0))
data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)

# Train SVD model
trainset, testset = train_test_split(data, test_size=0.2)
model = SVD()
model.fit(trainset)

# Predict rating
def predict_rating(user_id, movie_id):
    return model.predict(user_id, movie_id).est

# ---------- Content-Based Filtering ----------
# Combine genres for vectorization
movies['genres'] = movies['genres'].fillna('')
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'])

# Compute similarity matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Recommend similar movies
def get_similar_movies(movie_title, top_n=5):
    idx = movies[movies['title'].str.contains(movie_title, case=False, na=False)].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:top_n+1]
    movie_indices = [i[0] for i in sim_scores]
    return movies.iloc[movie_indices][['movieId', 'title', 'genres']]

# ---------- Hybrid Recommendation ----------
def hybrid_recommendation(user_id, movie_title, top_n=5):
    similar_movies = get_similar_movies(movie_title, top_n=10)
    similar_movies['predicted_rating'] = similar_movies['movieId'].apply(lambda x: predict_rating(user_id, x))
    top_movies = similar_movies.sort_values('predicted_rating', ascending=False).head(top_n)
    return top_movies[['title', 'genres', 'predicted_rating']]

# ---------- Demo ----------
# Replace with desired user ID and movie
user_id = 1
movie_input = "Matrix"

print(f"\nüîç Personalized recommendations for User {user_id} based on '{movie_input}':")
recommendations = hybrid_recommendation(user_id, movie_input, top_n=5)
print(recommendations)
